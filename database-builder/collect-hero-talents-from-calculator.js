const fs = require('fs').promises;
const { chromium } = require('playwright');

// ÌÅ¥ÎûòÏä§Î≥Ñ ÌäπÏÑ± Í≥ÑÏÇ∞Í∏∞ URL
const TALENT_CALC_URLS = {
  WARRIOR: [
    { spec: 'arms', url: 'https://www.wowhead.com/talent-calc/warrior/arms' },
    { spec: 'fury', url: 'https://www.wowhead.com/talent-calc/warrior/fury' },
    { spec: 'protection', url: 'https://www.wowhead.com/talent-calc/warrior/protection' }
  ],
  PALADIN: [
    { spec: 'holy', url: 'https://www.wowhead.com/talent-calc/paladin/holy' },
    { spec: 'protection', url: 'https://www.wowhead.com/talent-calc/paladin/protection' },
    { spec: 'retribution', url: 'https://www.wowhead.com/talent-calc/paladin/retribution' }
  ],
  HUNTER: [
    { spec: 'beast-mastery', url: 'https://www.wowhead.com/talent-calc/hunter/beast-mastery' },
    { spec: 'marksmanship', url: 'https://www.wowhead.com/talent-calc/hunter/marksmanship' },
    { spec: 'survival', url: 'https://www.wowhead.com/talent-calc/hunter/survival' }
  ],
  ROGUE: [
    { spec: 'assassination', url: 'https://www.wowhead.com/talent-calc/rogue/assassination' },
    { spec: 'outlaw', url: 'https://www.wowhead.com/talent-calc/rogue/outlaw' },
    { spec: 'subtlety', url: 'https://www.wowhead.com/talent-calc/rogue/subtlety' }
  ],
  PRIEST: [
    { spec: 'discipline', url: 'https://www.wowhead.com/talent-calc/priest/discipline' },
    { spec: 'holy', url: 'https://www.wowhead.com/talent-calc/priest/holy' },
    { spec: 'shadow', url: 'https://www.wowhead.com/talent-calc/priest/shadow' }
  ],
  SHAMAN: [
    { spec: 'elemental', url: 'https://www.wowhead.com/talent-calc/shaman/elemental' },
    { spec: 'enhancement', url: 'https://www.wowhead.com/talent-calc/shaman/enhancement' },
    { spec: 'restoration', url: 'https://www.wowhead.com/talent-calc/shaman/restoration' }
  ],
  MAGE: [
    { spec: 'arcane', url: 'https://www.wowhead.com/talent-calc/mage/arcane' },
    { spec: 'fire', url: 'https://www.wowhead.com/talent-calc/mage/fire' },
    { spec: 'frost', url: 'https://www.wowhead.com/talent-calc/mage/frost' }
  ],
  WARLOCK: [
    { spec: 'affliction', url: 'https://www.wowhead.com/talent-calc/warlock/affliction' },
    { spec: 'demonology', url: 'https://www.wowhead.com/talent-calc/warlock/demonology' },
    { spec: 'destruction', url: 'https://www.wowhead.com/talent-calc/warlock/destruction' }
  ],
  MONK: [
    { spec: 'brewmaster', url: 'https://www.wowhead.com/talent-calc/monk/brewmaster' },
    { spec: 'mistweaver', url: 'https://www.wowhead.com/talent-calc/monk/mistweaver' },
    { spec: 'windwalker', url: 'https://www.wowhead.com/talent-calc/monk/windwalker' }
  ],
  DRUID: [
    { spec: 'balance', url: 'https://www.wowhead.com/talent-calc/druid/balance' },
    { spec: 'feral', url: 'https://www.wowhead.com/talent-calc/druid/feral' },
    { spec: 'guardian', url: 'https://www.wowhead.com/talent-calc/druid/guardian' },
    { spec: 'restoration', url: 'https://www.wowhead.com/talent-calc/druid/restoration' }
  ],
  DEMONHUNTER: [
    { spec: 'havoc', url: 'https://www.wowhead.com/talent-calc/demon-hunter/havoc' },
    { spec: 'vengeance', url: 'https://www.wowhead.com/talent-calc/demon-hunter/vengeance' }
  ],
  DEATHKNIGHT: [
    { spec: 'blood', url: 'https://www.wowhead.com/talent-calc/death-knight/blood' },
    { spec: 'frost', url: 'https://www.wowhead.com/talent-calc/death-knight/frost' },
    { spec: 'unholy', url: 'https://www.wowhead.com/talent-calc/death-knight/unholy' }
  ],
  EVOKER: [
    { spec: 'devastation', url: 'https://www.wowhead.com/talent-calc/evoker/devastation' },
    { spec: 'preservation', url: 'https://www.wowhead.com/talent-calc/evoker/preservation' },
    { spec: 'augmentation', url: 'https://www.wowhead.com/talent-calc/evoker/augmentation' }
  ]
};

async function collectHeroTalentsFromCalculator() {
  console.log('üöÄ ÌäπÏÑ± Í≥ÑÏÇ∞Í∏∞ÏóêÏÑú ÏòÅÏõÖÌäπÏÑ± Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë\n');

  const browser = await chromium.launch({
    headless: false,  // UI ÌëúÏãúÌïòÏó¨ ÌôïÏù∏
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const context = await browser.newContext({
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    viewport: { width: 1920, height: 1080 }
  });

  const page = await context.newPage();

  // ÏóêÎü¨ Î¨¥Ïãú
  page.on('pageerror', () => {});
  page.on('error', () => {});

  const allHeroTalents = {};

  // Í∞Å ÌÅ¥ÎûòÏä§Î≥ÑÎ°ú Ï≤òÎ¶¨
  for (const [className, specs] of Object.entries(TALENT_CALC_URLS)) {
    console.log(`\n=== ${className} ÌÅ¥ÎûòÏä§ Ï≤òÎ¶¨ Ï§ë ===`);
    allHeroTalents[className] = {};

    // Ï≤´ Î≤àÏß∏ Ï†ÑÎ¨∏ÌôîÎßå Ï≤òÎ¶¨ (ÏòÅÏõÖÌäπÏÑ±ÏùÄ Î™®Îì† Ï†ÑÎ¨∏ÌôîÏóêÏÑú ÎèôÏùº)
    const spec = specs[0];
    console.log(`  üìä ${spec.spec} Ï†ÑÎ¨∏Ìôî ÌäπÏÑ± Í≥ÑÏÇ∞Í∏∞ Ï†ëÏÜç...`);

    try {
      await page.goto(spec.url, {
        waitUntil: 'networkidle',
        timeout: 60000
      });

      // ÌéòÏù¥ÏßÄ ÏôÑÏ†Ñ Î°úÎî© ÎåÄÍ∏∞
      await page.waitForTimeout(5000);

      // ÏòÅÏõÖÌäπÏÑ± ÌÉ≠ Ï∞æÍ∏∞ Î∞è ÌÅ¥Î¶≠
      const heroTalentTab = await page.$('button:has-text("Hero Talents"), .hero-tab, #hero-talents-tab, [data-tab="hero"]');

      if (heroTalentTab) {
        console.log('    ÏòÅÏõÖÌäπÏÑ± ÌÉ≠ Î∞úÍ≤¨, ÌÅ¥Î¶≠...');
        await heroTalentTab.click();
        await page.waitForTimeout(3000);
      }

      // ÏòÅÏõÖÌäπÏÑ± Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
      const heroTalentData = await page.evaluate(() => {
        const talents = [];

        // ÏòÅÏõÖÌäπÏÑ± ÎÖ∏Îìú Ï∞æÍ∏∞
        const talentNodes = document.querySelectorAll('[data-talent-id], [data-spell-id], .hero-talent-node, .talent-node');

        talentNodes.forEach(node => {
          try {
            // Ïä§ÌÇ¨ ID Ï∂îÏ∂ú
            let spellId = node.getAttribute('data-spell-id') || node.getAttribute('data-talent-id');

            if (!spellId) {
              const link = node.querySelector('a[href*="/spell="]');
              if (link) {
                const match = link.href.match(/spell=(\d+)/);
                if (match) spellId = match[1];
              }
            }

            if (!spellId) return;

            // Ïä§ÌÇ¨Î™Ö Ï∂îÏ∂ú
            const nameElem = node.querySelector('.talent-name, .spell-name, .name');
            const name = nameElem ? nameElem.textContent.trim() : '';

            // ÏïÑÏù¥ÏΩò Ï∂îÏ∂ú
            const iconElem = node.querySelector('ins, .icon, img');
            let icon = 'inv_misc_questionmark';

            if (iconElem) {
              const style = iconElem.getAttribute('style');
              const src = iconElem.getAttribute('src');

              if (style) {
                const iconMatch = style.match(/\/([^\/]+)\.(jpg|png)/);
                if (iconMatch) icon = iconMatch[1];
              } else if (src) {
                const iconMatch = src.match(/\/([^\/]+)\.(jpg|png)/);
                if (iconMatch) icon = iconMatch[1];
              }
            }

            // ÏÑ§Î™Ö Ï∂îÏ∂ú (Ìà¥ÌåÅ)
            const descElem = node.querySelector('.talent-desc, .description, .tooltip-content');
            const description = descElem ? descElem.textContent.trim() : '';

            // ÏòÅÏõÖÌäπÏÑ± Ìä∏Î¶¨ Ïù¥Î¶Ñ Ï∂îÏ∂ú
            const treeElem = node.closest('.hero-tree, .talent-tree');
            const treeName = treeElem ? treeElem.getAttribute('data-tree-name') : '';

            talents.push({
              id: spellId,
              name: name,
              icon: icon,
              description: description.substring(0, 500),
              tree: treeName
            });

          } catch (e) {
            console.error('ÎÖ∏Îìú Ï≤òÎ¶¨ Ïò§Î•ò:', e);
          }
        });

        return talents;
      });

      console.log(`    ÏàòÏßëÎêú ÏòÅÏõÖÌäπÏÑ± Ïä§ÌÇ¨: ${heroTalentData.length}Í∞ú`);

      // ÌïúÍµ≠Ïñ¥ ÌéòÏù¥ÏßÄÏóêÏÑúÎèÑ ÏàòÏßë ÏãúÎèÑ
      const koUrl = spec.url.replace('www.wowhead.com', 'ko.wowhead.com');
      console.log(`    ÌïúÍµ≠Ïñ¥ ÌéòÏù¥ÏßÄ Ï†ëÏÜç Ï§ë...`);

      await page.goto(koUrl, {
        waitUntil: 'networkidle',
        timeout: 60000
      });

      await page.waitForTimeout(5000);

      // ÏòÅÏõÖÌäπÏÑ± ÌÉ≠ ÌÅ¥Î¶≠ (ÌïúÍµ≠Ïñ¥)
      const koHeroTab = await page.$('button:has-text("ÏòÅÏõÖ ÌäπÏÑ±"), button:has-text("Hero"), .hero-tab');
      if (koHeroTab) {
        await koHeroTab.click();
        await page.waitForTimeout(3000);
      }

      // ÌïúÍµ≠Ïñ¥ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
      const koHeroTalentData = await page.evaluate(() => {
        const talents = {};

        const talentNodes = document.querySelectorAll('[data-talent-id], [data-spell-id], .hero-talent-node, .talent-node');

        talentNodes.forEach(node => {
          try {
            let spellId = node.getAttribute('data-spell-id') || node.getAttribute('data-talent-id');

            if (!spellId) {
              const link = node.querySelector('a[href*="/spell="]');
              if (link) {
                const match = link.href.match(/spell=(\d+)/);
                if (match) spellId = match[1];
              }
            }

            if (!spellId) return;

            const nameElem = node.querySelector('.talent-name, .spell-name, .name');
            const name = nameElem ? nameElem.textContent.trim() : '';

            const descElem = node.querySelector('.talent-desc, .description, .tooltip-content');
            const description = descElem ? descElem.textContent.trim() : '';

            talents[spellId] = {
              koreanName: name,
              koreanDescription: description.substring(0, 500)
            };

          } catch (e) {
            // Í∞úÎ≥Ñ ÎÖ∏Îìú Ï≤òÎ¶¨ Ïã§Ìå® Ïãú Í≥ÑÏÜç
          }
        });

        return talents;
      });

      // Îç∞Ïù¥ÌÑ∞ Î≥ëÌï©
      for (const talent of heroTalentData) {
        const koData = koHeroTalentData[talent.id] || {};

        allHeroTalents[className][talent.id] = {
          id: talent.id,
          englishName: talent.name,
          koreanName: koData.koreanName || talent.name,
          icon: talent.icon,
          description: koData.koreanDescription || talent.description,
          type: 'ÏòÅÏõÖÌäπÏÑ±',
          heroTalent: talent.tree || 'ÎØ∏Î∂ÑÎ•ò'
        };
      }

      console.log(`  ‚úÖ ${className} ÏôÑÎ£å: ${Object.keys(allHeroTalents[className]).length}Í∞ú Ïä§ÌÇ¨`);

    } catch (error) {
      console.log(`  ‚ùå ${className} Ï≤òÎ¶¨ Ïã§Ìå®: ${error.message}`);
    }

    // ÏÑúÎ≤Ñ Î∂ÄÌïò Î∞©ÏßÄ
    await page.waitForTimeout(3000);
  }

  // ÏµúÏ¢Ö Ï†ÄÏû•
  await fs.writeFile(
    './tww-s3-hero-talents-calculator.json',
    JSON.stringify(allHeroTalents, null, 2),
    'utf8'
  );

  // ÌÜµÍ≥Ñ Ï∂úÎ†•
  console.log('\n================================');
  console.log('‚ú® ÏòÅÏõÖÌäπÏÑ± Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å!');
  console.log('================================');

  let totalSkills = 0;
  for (const [className, skills] of Object.entries(allHeroTalents)) {
    const count = Object.keys(skills).length;
    console.log(`${className}: ${count}Í∞ú`);
    totalSkills += count;
  }

  console.log(`\nüìä Ï¥ù ${totalSkills}Í∞ú ÏòÅÏõÖÌäπÏÑ± Ïä§ÌÇ¨ ÏàòÏßë`);
  console.log('üìÅ Ï†ÄÏû• Í≤ΩÎ°ú: tww-s3-hero-talents-calculator.json');
  console.log('================================');

  await browser.close();
}

// Ïã§Ìñâ
collectHeroTalentsFromCalculator().catch(console.error);