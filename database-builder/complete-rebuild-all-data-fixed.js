const fs = require('fs').promises;
const { chromium } = require('playwright');

// TWW 시즌3 실제 스킬 ID (각 클래스별 핵심 스킬만)
const skillIds = {
  WARRIOR: [
    100, 355, 772, 845, 1160, 1464, 1680, 1715, 1719, 2565,
    5246, 5308, 6343, 6544, 6552, 6572, 6673, 7384, 12294, 12323,
    12975, 18499, 20243, 23881, 23920, 23922, 34428, 46968, 52174, 57755,
    64382, 85288, 97462, 100130, 107570, 107574, 118038, 163201, 167105, 184367,
    190411, 190456, 202168, 260708, 262161, 376079, 383873, 384318, 386394, 386397,
    392778, 401150, 435222, 440494, 440497, 440500
  ],
  PALADIN: [
    853, 633, 642, 1022, 1044, 6940, 19750, 20217, 20271, 20473,
    24275, 25780, 31850, 31821, 31884, 31935, 32223, 35395, 53600, 62124,
    82326, 85222, 85256, 86659, 96231, 105809, 114158, 114165, 115750, 148039,
    156910, 183778, 183998, 184092, 184575, 184662, 190784, 196941, 200025, 204018,
    204019, 210191, 213644, 213757, 214202, 215661, 216331, 217020, 223306, 231895,
    255937, 267798, 271580, 275773, 276111, 316958, 325013, 327193, 337247, 343527,
    378279, 385414, 387174, 403876, 427328, 427441, 427445, 431380, 432459, 432472,
    216368, 216371, 216372, 231642, 231663
  ],
  HUNTER: [
    781, 1130, 1513, 1543, 2641, 2643, 2649, 3355, 5116, 19263,
    19574, 19577, 34477, 53271, 56641, 61684, 83243, 83244, 83245, 109248,
    109304, 120360, 120679, 131894, 147362, 185358, 186257, 186265, 186270, 186387,
    187650, 187698, 187707, 187708, 190925, 193530, 193532, 193533, 194595, 198670,
    199483, 209997, 212431, 212436, 231390, 236776, 257045, 257284, 257620, 259387,
    259391, 259489, 259495, 260285, 260331, 260402, 264667, 264735, 265895, 269751,
    270335, 271014, 271788, 272790, 288613, 308491, 320976, 321297, 321530, 342049,
    359844, 360952, 360966, 375891, 378905, 388035, 392060
  ],
  ROGUE: [
    53, 408, 703, 921, 1766, 1776, 1784, 1833, 1856, 1943,
    1966, 2094, 2098, 2823, 2983, 3408, 5171, 5277, 8676, 13750,
    13877, 14062, 14161, 14183, 14185, 16511, 31224, 32645, 36554, 51667,
    51690, 51723, 57934, 73651, 79140, 84617, 108211, 114014, 114015, 114018,
    115191, 115192, 121471, 137619, 152150, 154953, 185311, 185313, 185438, 193315,
    193316, 195457, 196819, 196937, 198020, 200806, 207736, 245388, 259756, 269513,
    271877, 271881, 277925, 278981, 280719, 280720, 315496, 319175, 328085, 328547,
    360194, 381623, 381797, 382245, 385408, 385616, 385627, 392401, 392403, 394095,
    398071, 421435, 424785, 426591
  ],
  PRIEST: [
    17, 139, 527, 585, 586, 589, 605, 2050, 2060, 2061,
    8092, 8122, 10060, 15286, 15407, 15487, 19236, 21562, 32375, 32379,
    33206, 34433, 34861, 47536, 47540, 47585, 47788, 48045, 62618, 64843,
    64901, 73325, 73510, 81749, 88625, 108920, 109186, 110744, 120517, 121536,
    129250, 132157, 186263, 193195, 194509, 200174, 200183, 204197, 204883, 205065,
    205351, 205364, 205369, 205385, 214621, 215969, 228260, 263165, 263346, 280711,
    314867, 316262, 319952, 322105, 341374, 373481, 375901, 391109, 421453, 431663,
    431673
  ],
  SHAMAN: [
    546, 556, 1064, 2008, 2484, 2645, 2825, 5394, 8004, 8042,
    8143, 10399, 16191, 17364, 20608, 32182, 51485, 51490, 51505, 51514,
    51533, 51886, 52127, 57994, 58875, 61295, 73685, 73899, 73920, 77130,
    77226, 77472, 79206, 98008, 108269, 108270, 108271, 108280, 108281, 108283,
    108285, 108287, 114050, 114051, 114052, 115181, 117014, 152255, 152256, 157153,
    157154, 188196, 188389, 188443, 192058, 192077, 192106, 192222, 192249, 196840,
    196884, 197214, 198067, 198103, 207399, 210853, 260878, 320137, 333974, 375982,
    378081, 383009, 383019
  ],
  MAGE: [
    66, 116, 118, 120, 122, 130, 475, 759, 1449, 1459,
    1953, 2136, 2139, 2948, 5143, 10, 11, 12051, 12472, 30449,
    30451, 31661, 31687, 44425, 44457, 45438, 55342, 80353, 84714, 108839,
    108853, 110959, 110960, 113724, 116011, 116014, 120, 122, 153595, 153626,
    157980, 157981, 157997, 190319, 190356, 190447, 195283, 198929, 199786, 205021,
    205025, 212653, 235219, 235450, 257537, 257541, 321358, 342242, 365350, 376103,
    382440, 383783, 384581, 449700
  ],
  WARLOCK: [
    172, 348, 686, 689, 698, 702, 710, 755, 980, 1098,
    1122, 1454, 5484, 5697, 5740, 5782, 6201, 6262, 6353, 6358,
    6360, 6789, 17877, 17962, 20707, 27243, 29722, 29858, 30108, 30146,
    30283, 48018, 48020, 48181, 80240, 89766, 89808, 104316, 105174, 108370,
    108415, 108416, 108501, 108503, 111397, 111400, 111898, 113858, 113860, 113861,
    119898, 196098, 196099, 196103, 196104, 196105, 196269, 196277, 196406, 196408,
    196412, 198590, 201996, 205179, 205180, 205181, 264057, 264063, 264106, 264119,
    265187, 266086, 266087, 278350, 333889, 334183, 342601, 386997, 387955, 410598
  ],
  MONK: [
    100780, 100784, 101545, 101546, 101643, 107428, 109132, 113656, 115008, 115069,
    115072, 115074, 115078, 115098, 115151, 115173, 115176, 115181, 115203, 115288,
    115294, 115308, 115313, 115315, 115399, 115450, 115546, 116095, 116670, 116680,
    116705, 116841, 116844, 116847, 116849, 117952, 119381, 119582, 121253, 122278,
    122281, 122470, 122783, 123904, 123986, 124682, 132578, 137384, 137639, 148135,
    152173, 152175, 196721, 196725, 196730, 198898, 205523, 209584, 228649, 261682,
    261947, 322101, 322118, 325197, 387184, 388193, 388686, 392983, 393400, 450391,
    450503, 450508
  ],
  DRUID: [
    768, 774, 1079, 1822, 1850, 2637, 2782, 2908, 2912, 5176,
    5185, 5211, 5215, 5221, 5225, 5487, 6795, 6807, 8921, 8936,
    16864, 16870, 16914, 16931, 16979, 18562, 20484, 22568, 22812, 22842,
    24858, 29166, 33763, 33786, 33891, 33917, 48438, 48500, 48505, 50464,
    52610, 58180, 61336, 77758, 77761, 77764, 78674, 78675, 80313, 88423,
    99, 102342, 102351, 102401, 102543, 102558, 102560, 102693, 102703, 102793,
    106785, 106830, 106832, 106839, 106898, 106951, 108238, 108293, 108294, 114107,
    124974, 132158, 132302, 145205, 155580, 155625, 155672, 155675, 158476, 158477,
    158478, 163505, 164545, 164812, 164815, 165962, 171746, 188550, 190984, 191034,
    192081, 192090, 194153, 194223, 197488, 197492, 197625, 197626, 197628, 197721,
    202028, 202155, 202157, 202425, 202770, 203123, 203242, 203538, 203539, 203651,
    203727, 203953, 203962, 203964, 203965, 204066, 205636, 210689, 210706, 210722,
    213764, 213771, 231042, 231050, 231052, 231055, 231057, 231064, 236019, 252216,
    274281, 274282, 274283, 274837, 274902, 276021, 319439, 319454, 326228, 326434,
    328923, 338142, 354109, 391528, 393903, 394049, 394061, 394080, 410063, 421406,
    421432, 428858, 428859, 428933, 429785, 439530, 439531, 439868
  ],
  DEMONHUNTER: [
    131347, 162243, 162264, 162794, 163073, 178740, 179057, 183752, 185123, 185245,
    188499, 188501, 189110, 191427, 195072, 196555, 196718, 198013, 198589, 198793,
    201427, 201467, 202137, 202138, 203513, 203551, 203555, 203720, 204021, 204157,
    204254, 204255, 204596, 205411, 205604, 206476, 206491, 207684, 207771, 209258,
    209281, 209400, 210152, 210153, 211048, 211053, 211881, 212084, 213011, 213241,
    213480, 217832, 218256, 218679, 221527, 225919, 225921, 227225, 227322, 228477,
    232893, 235903, 236189, 247938, 252165, 258860, 258920, 258925, 263642, 264002,
    267171, 268175, 278326, 279584, 281854, 320341, 323639, 324386, 339229, 342817,
    344359, 357211, 370965, 389718, 389813, 389815, 389847, 390105, 390137, 390152,
    390155, 390163, 391166, 391172, 391429, 391430, 392138, 393013, 394926, 394927,
    394930, 394932, 427641, 427785, 427925, 427928, 428607, 442290, 442294, 442416,
    442426, 442428, 442433, 442435, 442497, 442500, 442502, 442503, 442504, 442624,
    442679, 442683, 442714, 442718
  ],
  DEATHKNIGHT: [
    43265, 46584, 47476, 47528, 47541, 47568, 48265, 48707, 48721, 48743,
    48792, 49020, 49028, 49039, 49184, 49206, 49576, 49998, 50842, 50977,
    51052, 51124, 51271, 51399, 51462, 52212, 55090, 55095, 55233, 56222,
    57330, 58640, 59057, 61999, 63560, 77575, 77606, 81229, 81256, 85948,
    96268, 101568, 108194, 108199, 108200, 108201, 111673, 114556, 114851, 114852,
    114866, 115989, 115994, 116888, 119072, 119073, 119074, 119075, 123693, 130735,
    130736, 145677, 152279, 152280, 163558, 194662, 194679, 194736, 194844, 194913,
    195181, 195182, 195292, 195457, 195617, 195621, 195679, 195758, 196770, 200646,
    200806, 204090, 204160, 206891, 206930, 206931, 206940, 206967, 206970, 206973,
    206974, 206977, 207018, 207057, 207061, 207104, 207110, 207112, 207114, 207115,
    207121, 207126, 207127, 207142, 207167, 207195, 207198, 207200, 207203, 207206,
    207207, 207256, 207264, 207265, 207266, 207267, 207268, 207269, 207272, 207285,
    207289, 207290, 207311, 207312, 207313, 207317, 207321, 207346, 210128, 210141,
    210764, 212552, 212653, 213322, 215711, 219786, 221536, 221562, 237225, 241094,
    242556, 242557, 253593, 253595, 264571, 269567, 271536, 271606, 273952, 273953,
    274009, 275699, 275917, 275918, 275919, 275920, 275924, 275925, 275926, 275929,
    275931, 276079, 276428, 276837, 277514, 278223, 278479, 278480, 279302, 279303,
    281208, 281209, 281238, 286832, 286836, 288853, 288855, 288875, 289311, 294556,
    305392, 311648, 311868, 312202, 315442, 315443, 315720, 316239, 316855, 316916,
    316941, 316958, 316961, 317898, 319217, 319226, 319227, 319228, 319229, 319230,
    319231, 319232, 319233, 319234, 319235, 319236, 319237, 319238, 319239, 319240,
    319257, 319637, 320655, 320674, 320679, 321995, 322013, 322014, 322016, 322018,
    322074, 322088, 322089, 322090, 322091, 322092, 322093, 322096, 322098, 322099,
    322102, 322104, 322106, 322109, 322113, 322117, 322119, 322120
  ],
  EVOKER: [
    // 기원사 - 실제 핵심 스킬만 (약 80-100개)
    351338, 355913, 355936, 357208, 357209, 357210, 357211, 358267, 358385, 358733,
    359073, 359816, 360806, 360827, 360995, 361021, 361195, 361227, 361361, 361500,
    361509, 362362, 362877, 362969, 362980, 363502, 363534, 363916, 364342, 364343,
    365080, 365362, 365585, 366155, 366658, 366906, 367226, 367230, 367231, 367234,
    368432, 368847, 368970, 369536, 369561, 369562, 369563, 370452, 370454, 370455,
    370537, 370553, 370665, 370818, 370834, 370837, 370840, 370842, 370845, 370847,
    370849, 370850, 370851, 370852, 370853, 370854, 370855, 370857, 370859, 370860,
    370861, 370865, 370872, 370873, 370874, 370875, 370876, 370877, 370878, 370879,
    370880, 370881, 370882, 370883, 370884, 370885, 370886, 370887, 370888, 370889,
    370890, 370891, 370892, 370893, 370894, 370897, 370898, 370899, 370901, 370904
  ]
};

async function collectSkillDetailsWithRetry(page, skillId, retryCount = 0) {
  const maxRetries = 3;

  try {
    console.log(`  🔍 [${skillId}] 상세 정보 수집 중...`);

    // Wowhead 접속
    await page.goto(`https://www.wowhead.com/spell=${skillId}`, {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });

    // 잠시 대기
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 1. 영문명 추출
    const englishName = await page.evaluate(() => {
      const h1 = document.querySelector('h1.heading-size-1');
      return h1 ? h1.textContent.trim() : '';
    });

    // 2. 아이콘 추출
    let iconName = 'inv_misc_questionmark';
    const iconElement = await page.$('.iconlarge ins');
    if (iconElement) {
      const style = await iconElement.getAttribute('style');
      if (style) {
        const iconMatch = style.match(/\/([^\/]+)\.(jpg|png)/);
        if (iconMatch) {
          iconName = iconMatch[1].toLowerCase();
        }
      }
    }

    // 3. 스킬 설명 추출
    const description = await page.evaluate(() => {
      const tooltipEl = document.querySelector('.q, .q0, .q1, .q2, .q3, .q4, .q5');
      if (tooltipEl) {
        return tooltipEl.textContent.trim();
      }

      const spellDesc = document.querySelector('.spell-desc');
      if (spellDesc) {
        return spellDesc.textContent.trim();
      }

      return '';
    });

    // 4. 재사용 대기시간, 시전 시간, 사거리 등 추출
    const details = await page.evaluate(() => {
      const result = {
        cooldown: '없음',
        castTime: '즉시 시전',
        range: '자신',
        resourceCost: '없음',
        resourceGain: '없음'
      };

      // 테이블에서 정보 추출
      const tables = document.querySelectorAll('table.grid');
      tables.forEach(table => {
        const rows = table.querySelectorAll('tr');
        rows.forEach(row => {
          const th = row.querySelector('th');
          const td = row.querySelector('td');
          if (th && td) {
            const label = th.textContent.trim().toLowerCase();
            const value = td.textContent.trim();

            if (label.includes('cooldown') || label.includes('재사용')) {
              result.cooldown = value || '없음';
            } else if (label.includes('cast time') || label.includes('시전')) {
              result.castTime = value || '즉시 시전';
            } else if (label.includes('range') || label.includes('사거리')) {
              result.range = value || '자신';
            } else if (label.includes('cost') || label.includes('소모')) {
              result.resourceCost = value || '없음';
            }
          }
        });
      });

      return result;
    });

    // 5. 한국어 이름 가져오기 (ko.wowhead.com)
    let koreanName = englishName; // 기본값
    try {
      await page.goto(`https://ko.wowhead.com/spell=${skillId}`, {
        waitUntil: 'domcontentloaded',
        timeout: 10000
      });

      koreanName = await page.evaluate(() => {
        const h1 = document.querySelector('h1.heading-size-1');
        return h1 ? h1.textContent.trim() : '';
      });
    } catch (error) {
      console.log(`    ⚠️ 한국어 번역 수집 실패, 영문명 사용`);
    }

    // 6. 스킬 타입 및 전문화 판단
    const type = skillId < 1000 ? '기본' : '특성';
    const spec = '공용'; // 기본값

    return {
      id: skillId,
      koreanName,
      englishName,
      icon: iconName,
      description: description || '설명 없음',
      cooldown: details.cooldown,
      castTime: details.castTime,
      range: details.range,
      resourceCost: details.resourceCost,
      resourceGain: details.resourceGain,
      type,
      spec,
      level: 1,
      pvp: false
    };

  } catch (error) {
    if (retryCount < maxRetries) {
      console.log(`    ⚠️ 재시도 ${retryCount + 1}/${maxRetries}`);
      await new Promise(resolve => setTimeout(resolve, 2000));
      return collectSkillDetailsWithRetry(page, skillId, retryCount + 1);
    }

    console.log(`    ❌ [${skillId}] 수집 실패:`, error.message);
    return null;
  }
}

async function collectAllSkillsComplete() {
  console.log('🚀 TWW 시즌3 완전 데이터베이스 재구축 시작\n');
  console.log('📌 모든 스킬의 완전한 정보를 수집합니다 (이름, 아이콘, 설명, 쿨타임, 시전시간, 사거리, 자원 등)\n');

  const database = {};
  let totalSkills = 0;
  let successCount = 0;

  // 브라우저 시작 (headless 모드)
  const browser = await chromium.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const context = await browser.newContext({
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });

  // 페이지 생성 (재사용)
  const page = await context.newPage();

  // 각 클래스별로 처리
  for (const [className, skills] of Object.entries(skillIds)) {
    console.log(`\n=== ${className} 클래스 처리 중 (${skills.length}개 스킬) ===`);
    database[className] = {};

    // 배치 처리 (5개씩)
    const batchSize = 5;
    const batches = [];
    for (let i = 0; i < skills.length; i += batchSize) {
      batches.push(skills.slice(i, i + batchSize));
    }

    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      console.log(`  배치 ${batchIndex + 1}/${batches.length} 처리 중...`);

      for (const skillId of batch) {
        const skillData = await collectSkillDetailsWithRetry(page, skillId);

        if (skillData) {
          database[className][skillId] = skillData;
          successCount++;
          console.log(`  ✅ [${skillId}] ${skillData.koreanName} 수집 완료`);
        }

        totalSkills++;
      }

      // 10개 배치마다 중간 저장
      if ((batchIndex + 1) % 10 === 0) {
        await fs.writeFile(
          './tww-s3-complete-database.json',
          JSON.stringify(database, null, 2),
          'utf8'
        );
        console.log(`  💾 중간 저장 완료 (${totalSkills}개 처리됨)`);
      }
    }

    console.log(`✅ ${className} 처리 완료: ${Object.keys(database[className]).length}개 스킬`);
  }

  await browser.close();

  // 최종 저장
  await fs.writeFile(
    './tww-s3-complete-database.json',
    JSON.stringify(database, null, 2),
    'utf8'
  );

  console.log('\n================================');
  console.log('✨ TWW 시즌3 완전 데이터베이스 구축 완료!');
  console.log(`📊 전체 스킬: ${totalSkills}개`);
  console.log(`✅ 성공: ${successCount}개`);
  console.log(`❌ 실패: ${totalSkills - successCount}개`);
  console.log('💾 파일: tww-s3-complete-database.json');
  console.log('================================');

  // 통계 출력
  for (const [className, skills] of Object.entries(database)) {
    const count = Object.keys(skills).length;
    console.log(`${className}: ${count}개`);
  }

  // 다음 단계 안내
  console.log('\n📌 다음 단계: merge-and-update-database.js를 실행하여 기존 데이터베이스와 병합하세요.');
}

collectAllSkillsComplete().catch(console.error);